/*
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;


/*
Stupidly done this in an independant project so give me a couple hours to ensure it
runs well with the rest of our project


HighScores highScores =new HighScores();

        System.out.println("Top 5 high Scorers: " + Arrays.toString(highScores.getTopNames()));
        System.out.println("Top 5 high scores: " + Arrays.toString(highScores.getTopScores()));

        }
      */

/*
Creating a HighScore instance
 */
public class HighScores {

    /**

     * data file

     */

    static File dataFile = new File("scores.txt");

    /**

     * Array list of high scores

     */

    ArrayList<ScoreEntry> highScores;

    final int MAX_ENTRIES = 5;

    public HighScores() {

        /**

         * initializing list

         */

        highScores = new ArrayList<ScoreEntry>();

        if (dataFile.exists()) {

            /**

             * file exists, loading data from file

             */

            loadData();

        } else {

            /**

             * file doesnt exist, creating one

             */

            createInitialData();

        }

    }

    /**

     * method to load data from file into the list

     */

    public void loadData() {

        try {

            Scanner scanner = new Scanner(dataFile);

            while (scanner.hasNext()) {

                String name = scanner.nextLine();

                int score = Integer.parseInt(scanner.nextLine());

                System.out.println(score);
                System.out.println(highScores);

                ScoreEntry entry = new ScoreEntry(name, score);

                highScores.add(entry);

            }

        } catch (FileNotFoundException e) {

            e.printStackTrace();

        } catch (Exception e) {

            System.out.println("File corrupted");

        }

    }

    /**

     * method to create initial data and save into the file

     */

    public void createInitialData() {

        for (int i = 0; i < MAX_ENTRIES; i++) {

            /**

             * creating an entry with blank name and 0 score

             */

            ScoreEntry entry = new ScoreEntry();

            highScores.add(entry);

        }

        saveData();// saving data

    }

    /**

     * method to save data into the file

     */

    public void saveData() {

        try {

            PrintWriter writer = new PrintWriter(dataFile);

            for (ScoreEntry entry : highScores) {

                writer.append(entry.getName() + "\n");

                writer.append(entry.getScore() + "\n");

            }

            writer.close();

        } catch (FileNotFoundException e) {

            e.printStackTrace();

        }

    }

    /**

     * method to update the player score. This will add a player if the score is

     * among top 5, else does nothing

     */

    public void playerScore(String name, int score) {

        /**

         * creating an entry and adding to the list

         */

        ScoreEntry entry = new ScoreEntry(name, score);

        highScores.add(entry);

        /**

         * sorting the list (by score)

         */

        Collections.sort(highScores);

        /**

         * removing the last element if the size exceeds 5, so that the lowest

         * score will be removed

         */

        if (highScores.size() > MAX_ENTRIES) {

            highScores.remove(highScores.size() - 1);

        }

        saveData(); // saving file

    }

    /**

     *

     * @return an array containing top 5 high scorers

     */

    public String[] getTopNames() {

        String names[] = new String[highScores.size()];

        for (int i = 0; i < highScores.size(); i++) {

            names[i] = highScores.get(i).getName();

        }

        return names;

    }

    /**

     *

     * @return an array containing top 5 high scores

     */

    public int[] getTopScores() {

        int scores[] = new int[highScores.size()];

        for (int i = 0; i < highScores.size(); i++) {

            scores[i] = highScores.get(i).getScore();

        }

        return scores;


    }

    /**

     * ScoreEntry class which represents a single entry to the scores list. This is


     */
    class ScoreEntry implements Comparable<ScoreEntry> {

        private String name;

        private int score;

        public ScoreEntry() {

            /**

             * empty name and 0 score

             */

            name = "";

            score = 0;

        }

        public ScoreEntry(String name, int score) {

            // initializing name and score

            this.name = name;

            this.score = score;

        }

        public String getName() {

            return name;

        }

        public void setName(String name) {

            this.name = name;

        }

        public int getScore() {

            return score;

        }

        public void setScore(int score) {

            this.score = score;

        }

        /**

         * This method is important for sorting by score.

         */

        @Override

        public int compareTo(ScoreEntry se) {

            if (this.score < se.score) {

                return 1;

            } else if (this.score > se.score) {

                return -1;

            } else {

                return 0;

            }

        }

    }
}

*/
